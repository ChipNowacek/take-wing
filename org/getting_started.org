

In this section, we will build the most ontology and start to show the
basic capabilities of Tawny-OWL.

As described in <</the/environment,the environment>>, Tawny-OWL can be
used with several different toolchains. In this section, we will run
through the building a very simple ontology. There is an <> describing
how to achieve each of these steps with specific tool chains.

** Getting a Project

For this book, we will use a pre-rolled project -- in fact the one used
to create this book. You can access the project data from
https://github.com/phillord/take-wing[github], either using =git= or
through the download option. If you wish to know how to build a project
yourself, please read <>.

A leiningen project is, essentially, a directory structure with a
project file. The =project.clj= file for this book looks like this:

#+INCLUDE: "../project.clj" src clojure

This includes three critical pieces of information. Firstly =take-wing=
which is the name of the project. Secondly, immediately after this is a
version number such as =0.1.0=. Finally, we have a =:dependencies= which
includes only a single dependency to =tawny-owl= itself.


** Starting a new ontology

It is possible to build an ontology in Tawny-OWL using almost no
functions from Clojure, the language on which it is built; the only
necessary exception to this is the /namespace declaration/.

Like most programming languages, Clojure has a namespacing mechanism.
These are declared at the start of each file, and the namespace relates
to the file name and location. Finally, the namespace form is also used
to import functions from other namespaces. Here, we define a namespace
called =take.wing.getting-started= which would be defined in a file
=take/wing/getting_started.clj=. Secondly, we import =tawny.owl=
namespace which contains the core functions of Tawny-OWL.

#+BEGIN_SRC clojure
(ns take.wing.getting-started (:use [tawny.owl]))
#+END_SRC

Tawny-OWL also uses the namespace mechanism to define the scope of an
ontology. In general, an ontology is defined within a single namespace,
and each namespace defines a single ontology. A new ontology is declared
with the =defontology= form. This also introduces a new symbol, =pizza=,
which can be used latter to refer.

#+BEGIN_SRC clojure
(defontology pizza)
#+END_SRC


** Connecting to a repl

Currently, the source for the ontology has been created, but this is not
"live" -- for this, we must start a Clojure process and connect to it
via a REPL and then evaluate the file. With the current contents, the
REPL should show something like the following which is the result of
evaluating the last form, and shows that we have defined a new symbol
footnote:[In Clojure, it is actually a var that has been created]

#+BEGIN_EXAMPLE
=> #'take.wing.getting-started/pizza
#+END_EXAMPLE

The symbol =pizza= now refers to an object live in the system. If
evalulate =pizza=, a hopefully informative string message will be
printed.


#+BEGIN_EXAMPLE
take.wing.getting-started> pizza
#<OWLOntologyImpl Ontology(OntologyID(OntologyIRI(<#pizza>))) [Axioms: 0 Logical Axioms: 0]>
#+END_EXAMPLE

** Creating some entities

Now we create some entities for our ontology, in this case two classes
called =Pizza= and =MargheritaPizza=, and state that =MargheritaPizza=
is a subclass of =Pizza=. This forms implicitly place these two terms

#+BEGIN_SRC clojure
(defclass Pizza)
(defclass MargheritaPizza :super Pizza) 
#+END_SRC

Finally, we are in a position to make a useful query against this which
we can do using the =subclasses= function.

#+BEGIN_SRC clojure
(subclasses Pizza)
#+END_SRC

In a REPL session, this returns a set with one element ---
=MargheritaPizza=. If we evaluate =pizza= (the ontology) again, we also
see that the ontology now has a number of axioms.


#+BEGIN_SRC clojure
(subclasses Pizza)
#{#<OWLClassImpl <#pizza#MargheritaPizza>>}
take.wing.getting-started> pizza
=> #<OWLOntologyImpl Ontology(OntologyID(OntologyIRI(<#pizza>))) [Axioms: 5 Logical Axioms: 1]>
#+END_SRC


** Summary

In this section, we have outlined the basic tasks that are needed to
build ontologies with Tawny-OWL: creating a project, creating an
ontology, creating some entities. We have also started to show how to
use and query over them. In the next section, we will build this
ontology in full, using it to demonstrate many parts of Tawny-OWL and
OWL ontologies in general.



