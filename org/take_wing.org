#+TITLE: Take Wing: Building Ontologies with Tawny-OWL
#+LATEX_HEADER: \usepackage{tawny}
#+LATEX_HEADER: \lstnewenvironment{tawny}{\lstset{style=tawnystyle}}{}

#+BIND: org-publishing-directory "./exports"
#+BIND: org-latex-custom-lang-environments ((clojure "tawny"))
#+BIND: org-latex-listings t

* Introduction

This book introduces ontology building using the OWL2 ontology language, and
the Tawny-OWL library. Ontologies are a method for representing knowledge,
generally, but not necessarily, about the world around us. It is then possible
to check that the representation is consistent, as well as drawing conclusions
about new knowledge. They are generally used in complex, knowledge-rich areas
of knowledge, including biomedicine.

Many ontology development tools provide a Graphical User Interface, through
which the ontology developer adds the various entities involved in building an
ontology. However, many ontologies contain large and repetitive sections; for
these, ontology development teams often fall back to generating parts of their
ontology programmatically. Tawny-OWL takes a different approach where ontology
development in a domain-specific language (DSL) embedded in a full programming
language. For structurally simple parts of an ontology, the various components
of an ontology can be specified using the default convienient and simple
Tawny-OWL syntax; for structurally complex parts, new syntax and new patterns
can be built, extending the environment as a core part of ontology
development.

This form of programmatic ontology development is still young. At the moment,
we have used it to produce large ontologies that would have been difficult
using any other technique. However, we also hope that we can also support
easier integration of knowledge-rich structures into applications, so that
ontological data structures can be come a standard part of the programmers
toolkit.


** Status

This manual is a work in progress and there are quite a few bits to write yet.
Once, it is somewhat more advanced, we will mark up the individual sections
with status markers!

* What is an Ontology
<<what_is_an_ontology>>

Ontologies are about definitions. It is, perhaps, unsurprising therefore
that amount ontologists there are quite a few debates about what exactly
an ontology is and is not; it is not our intention here to either cover
these arguments, nor to give a comprehensive overview of all the uses of
the word.

What is generally agreed is that ontologies describe a set of entities,
in terms of the relationships between these entities, using any of a
number of different relationships. So, for example, we can describe
entities in terms of their class relationships -- what is true of a
superclass is also true of all subclasses. Or we can describe the
/partonomic/ relationships: the finger is part of the hand, which is
part of the foot.

An ontology is also very similar to a taxonomy; however, ontologies
place much greater emphasis on their computational properties. This
makes ontologies much more suitable for driving applications and code,
although this often comes at the cost of human understandability of the
ontology. In this document, all the ontologies we talk about are
represented using specific language, called OWL (the Ontology Web
Language). This has very well-defined computational properties, and
through the document we will explore the implications of these
properties.

We also use the term "ontology" to mean a specific object that you can
manipulate in Tawny-OWL -- similar to the way we say that you are
reading some words now.


* Environment

Our hope is that for structurally simple ontologies, Tawny-OWL should be
usable by non-programmers, with a simple and straight-forward syntax.
One area where this hope is currently not fulfilled is right at the
start -- getting a working environment is not as simple as starting an
application such as Protege and programming. In this section, I
introduce the core technology and the basic environment that is needed
to make effective use of Tawny-OWL.


** The OWL API

Tawny-OWL is built using the http://owlapi.sourceforge.net/[OWL API].
This library is a comprehensive tool for generating, transforming and
using OWL Ontologies. It is widely used, and is the basis for the
Protege 4 editor. Being based on this library, Tawny-OWL is reliable and
standard-compliant (or at least as reliable and standard-compliant as
Protege!). It is also easy to integrate directly with other tools
written using the OWL API.

** Clojure

Tawny-OWL is a programmatic library build on top of the Clojure
language. Tawny-OWL takes many things from Clojure. These include:

-  the basic syntax with parentheses and with =:keywords=
-  the ability to effectively add new syntax
-  the ability to extend Tawny-OWL with patterns
-  integration with other data sources
-  the test environment
-  the build, dependency and deployment tools

In addition, most of the tools and environment that Tawny-OWL use to
enable development were built for Clojure and are used directly with
little or no additions. These include:

-  IDEs or editors used for writing Clojure
-  the leiningen build tool

Tawny-OWL inherits a line-orientated syntax which means that it works
well with tools written for any programming language; most notable
amoung these are version control systems which enable highly
collaborative working on ontologies.

Clojure is treated as a programmatic library -- the user never starts or
runs Clojure, and there is no =clojure= command. Rather confusingly,
this role is fulilled by Leiningen, which is the next item on the list.

** Leiningen

http://www.leiningen.org[Leiningen] is a tool for working with Clojure
projects. Given a directory structure, and some source code leiningen
will perform many project tasks including checking, testing, releasing
and deploying the project. In addition to these, it has two critical
functions that every Tawny-OWL project will use: first, it manages
dependencies, which means it will download both Tawny-OWL and Clojure;
second, it starts a REPL which is the principle means by which the user
will directly or indirectly interact with Tawny-OWL.

** REPL

Clojure provides a REPL -- Read-Eval-Print-Loop. This is the same things
as a shell, or command line. For instance, we can the following into a
Clojure REPL, and it will print the return value, or 2 in this case.


#+BEGIN_SRC clojure
;; returns 2 
(+ 1 1)
#+END_SRC

The most usual way to start a REPL is to use leiningen, which then sets
up the appropriate libraries for the local project. For example,
=lein repl= in the source code for this document, loads a REPL with
Tawny-OWL pre-loaded.

In practice, most people use the REPL indirectly through their IDE.

** IDE or Editor

Clojure is supported by a wide variety of editors, which in turn means
that they can be used for Tawny-OWL. The choice of an editor is a very
personal one (I use Emacs), but in practice any good editor will work.

The editor has two main roles. Firstly, as the name suggests it provides
a rich environment for writing Tawny-OWL commands. Secondly, the IDE
will start and interact with a REPL for you. This allows you to add or
remove new classes and other entities to an ontology interactively.
Tawny-OWL has been designed to take advantage of an IDE environment; in
most cases, for example, auto-completion will happen for you.

** Further Information

There are many sources of further information about Clojure which will
be listed here.


* Getting Started

#+include: "getting_started.org"





* The Pizza Ontology

#+include: "the_pizza_ontology.org"




* Appendix

** Appendix: Tool Specific Instructions

In this appendix with give specific instructions for achieving the tasks
in the <</getting/started,Getting Started>> section and elsewhere. These
instructions are relatively brief pointers. In practice, you may need to
consult the documentation of the various systems. Each section begins
with a short comment on the advantages and disadvantages of each system.

-  <>
-  <>
-  <>
-  <>

*** Emacs

Emacs provides a rich environment for editing Tawny-OWL ontologies,
especially when combined with a set of other tools used from the command
line. Emacs is itself written in Lisp. It is fantastic for
keyboard-lovers as everything can be done from the keyboard. Emacs is a
tool with a long history which means that it tends to conform to its own
standards rather than those of the operating systems it works on, which
can make it strange experience for those new to it.

I (Phillip Lord) use Emacs and a few of the tools described in this
document are Emacs-specific.

**** Installation

Emacs can be installed with a system-specific package-manager. You will
need at least Emacs 24. Once installed you will need to add two Emacs
packages to get a rich Clojure environment: these are
https://github.com/clojure-emacs/cider[=cider=] and
https://github.com/clojure-emacs/clojure-mode[=clojure-mode=]. In
addition, there are a set of supporting systems which add to the
experience of using Emacs for Tawny-OWL: these include
http://github.com/magit/magit[=magit=] for controlling
http://git-scm.org[git];
https://github.com/bbatsov/projectile[=projectile=] for navigating
projects quickly; and http://www.emacswiki.org/emacs/ParEdit[=paredit=]
which keeps parentheses in place.

In addition to Emacs, http://leiningen.org[leiningen] needs to be
installed for project management. Finally, http://git-scm.org[git] is
used for versioning.

**** Getting a project

To get the take-wing project, just clone the git repository with git
clone. Alternatively, without git download the zip file and unpack.
Emacs does not require that the project be imported; opening a file
inside a project is all that is needed.

#+BEGIN_EXAMPLE
git clone https://github.com/phillord/take-wing
#+END_EXAMPLE


**** Starting a New Namespace 

Emacs does not need specific support for this. Simply open a new file.
If you have installed Clojure mode and Cider correctly, Emacs will
insert a namespace form for you. You will need to add =:use= statement
by hand.

**** Starting a REPL

Emacs uses Leiningen to start a REPL so this must be installed. It is
launched directly by cider. To do so type =M-x cider-jack-in=, which
defaults to =C-c M-j=. It takes a short while to work (especially the
first time, since Leiningen has to download dependencies).

**** Eval a form

Assuming that a REPL has been started, it is possible to evaluate forms
in place; look for the "eval" menu items under the "Cider" menu. As well
as individual forms and a region, whole files can be evaluated. The
results of an the evaluaton appear in the minibuffer. It is also
possible to interact directly with the REPL buffer which is useful for
playing.

*** Eclipse

Eclipse is a modern IDE. This means that it is full of functionality,
conforms to modern standards and works with lots of languages.
Conversely, it requires lots of resources and forces you to work its
way.

*** Vim

Vim, like <> is an editor with a long history. It is fast, light-weight
and extremely functional. Also like Emacs, it can be a bit jarring at
first. It has very good Clojure support.

*** Lighttable

Lighttable is a very new IDE whose purpose is to reinvent many of the
existing idioms associated with programming. The demos are visually
impressive.



* Incomplete Import




include::asciidoc/literate.adoc[]
include::asciidoc/how_is_this_written.adoc[]
include::asciidoc/tool_support.adoc[]
include::asciidoc/a_new_project.adoc[]
